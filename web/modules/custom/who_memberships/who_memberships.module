<?php

/**
 * @file
 * WHO data alter hook.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Presave hook to add new subscriptions.
 */
function who_memberships_entity_presave(EntityInterface $entity) {
  if ($entity instanceof ContentEntityInterface && $entity->getEntityTypeId() === 'node') {
    $who_manager = \Drupal::service('who_memberships.manager');
    switch ($entity->bundle()) {
      case 'product':
        $who_manager->createMembership($entity, 'update_new_member');
        break;
    }
  }
}

/**
 * Callback validation to check membership status.
 *
 * - @cover 12.Any Contact with a subscription status,
 * ‘Active’ must be able to login to the website.
 *
 * @param array $form
 *   Form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form object.
 * @param string $form_id
 *   Form ID.
 */
function who_memberships_form_alter(array &$form, FormStateInterface $form_state, string $form_id) {
  if ($form_id === 'user_login_form') {
    array_unshift($form['#validate'], 'who_members_login_validation');
  }
}

/**
 * Add validation to login form.
 *
 * @param array $form
 *   Form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form object.
 */
function who_members_login_validation(array &$form, FormStateInterface $form_state) {
  $userName = $form_state->getValue('name');
  $userEmail = $form_state->getValue('email') ? $form_state->getValue('email') : NULL;
  /** @var \Drupal\user\UserInterface $account */
  $account = $userEmail ? user_load_by_mail($userEmail) : user_load_by_name($userName);
  // If local user entity found replace the CH entity with local entity.
  if ($account) {
    $entity = $account;
  }
  $query = \Drupal::entityTypeManager()->getStorage('node');
  if (empty($account->get('field_subscribed_to')->getValue())) {
    return;
  }

  $subscriptions = array_map(function ($value) {
      return $value['target_id'];
  }, $account->get('field_subscribed_to')->getValue());
  $query_result = $query->getQuery()
    ->accessCheck(FALSE)
    ->condition('type', 'subscription')
    ->condition('nid', $subscriptions, 'IN')
    ->condition('field_subscription_status', 1);
  $active_membership_found = $query_result->execute();
  if (!empty($active_membership_found)) {
    return;
  }
  $form_state->setErrorByName("name", "Login failed: No Active subscription found for contact: {$userName}");
}

/**
 * Implemented a fix for view duplicate results.
 *
 * @see https://www.drupal.org/project/drupal/issues/2993688
 */
function who_memberships_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'company_subscription_list' && $view->getDisplay()->display['id'] == 'company_subscription') {
    $query->addField('', 'uid', '', ['function' => 'groupby']);
    $query->addGroupBy('uid');
  }
}

/**
 * Implementing a form mode switch for user entity.
 */
function who_memberships_entity_form_display_alter(&$form_display, $context) {
  if ($context['entity_type'] == 'user' && $context['bundle'] == 'user') {
    $user = \Drupal::currentUser();
    if (in_array('authenticated', $user->getRoles())) {
      $storage = \Drupal::service('entity_type.manager')->getStorage('entity_form_display');
      $form_display = $storage->load('user.user.who');
    }
  }
}
